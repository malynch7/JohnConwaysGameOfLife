{"version":3,"sources":["Cell.js","CellGrid.js","InfoPanel.js","ControlPanel.js","App.js","index.js"],"names":["Cell","data","gridDimensions","updateCell","style","columns","width","className","isAlive","onClick","id","CellGrid","grid","map","cellRow","cell","rows","length","Math","floor","InfoPanel","generation","livingCellCount","ControlPanel","setGrid","setGeneration","rowCount","setRowCount","columnCount","setColumnCount","freshGrid","interval","useRef","useState","isRunning","setRunning","tickPeriod","setTickPeriod","genZeroGrid","setGenZeroGrid","incrementGeneration","newGrid","i","j","neighbors","newCell","prevGeneration","useEffect","current","setInterval","clearInterval","htmlFor","min","max","defaultValue","onChange","sliderValue","value","toString","e","parseInt","target","App","createFreshGrid","nextId","push","startingGrid","createStartingGrid","window","innerWidth","height","innerHeight","cellGrid","count","forEach","filter","countLivingCells","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34315d75.chunk.js","sourcesContent":["import './Cell.css';\r\n\r\nexport default function Cell({data, gridDimensions, updateCell}) {\r\n\r\n    const handleClick = () => {\r\n        updateCell(data.id, !data.isAlive);\r\n    }\r\n\r\n    const style = (gridDimensions.columns < 11) ? {} : {\r\n        width: `${100 / gridDimensions.columns}%`\r\n    }\r\n\r\n    return (\r\n        <div style={style}\r\n            className = {`cell ${data.isAlive ? 'alive' : ''}`}\r\n            onClick = {handleClick}\r\n        />\r\n    );\r\n}","import React from 'react';\r\n\r\nimport Cell from './Cell'\r\nimport './CellGrid.css';\r\n\r\nexport default function CellGrid({grid, updateCell}) {\r\n\r\n    return grid.map((cellRow) => {\r\n        return (\r\n            <div key={`row${Math.floor(cellRow[0].id)}`} className=\"cell-row\">\r\n                {\r\n                    cellRow.map((cell) => {\r\n                        return <Cell\r\n                            gridDimensions={{\r\n                                rows: grid.length,\r\n                                columns: grid[0].length\r\n                            }}\r\n                            className='cell'\r\n                            key={cell.id}\r\n                            data={cell}\r\n                            updateCell={updateCell}\r\n                        />\r\n                    })\r\n                }</div>\r\n        );\r\n    });\r\n}","import './InfoPanel.css';\r\n\r\nexport default function InfoPanel({generation, livingCellCount}) {\r\n\r\n\r\n    return (\r\n        <div id=\"info-panel\" className={'container'}>\r\n            <h3 className={'section-header'}>Information</h3>\r\n            <h4>Generation: {generation}</h4>\r\n            <h4>Living Cells: {livingCellCount}</h4>\r\n            <h4>Rules</h4>\r\n            <ol>\r\n                <li>Any live cell with two or three live neighbours survives.</li>\r\n                <li>Any dead cell with three live neighbours becomes a live cell.</li>\r\n                <li>All other live cells die in the next generation. Similarly, all other dead cells stay dead.</li>\r\n            </ol>\r\n\r\n        </div>\r\n    );\r\n}","import React, {useState, useRef, useEffect} from 'react';\r\nimport Slider from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\nimport './ControlPanel.css';\r\n\r\nexport default function ControlPanel({grid, setGrid, generation, setGeneration, rowCount, setRowCount, columnCount,\r\n                                         setColumnCount, freshGrid}) {\r\n\r\n    const interval = useRef(null);\r\n    const [isRunning, setRunning] = useState(false);\r\n    const [tickPeriod, setTickPeriod] = useState(200);\r\n    const [genZeroGrid, setGenZeroGrid] = useState(null);\r\n\r\n    const changeGridDimensions = (e) => {\r\n        setRowCount(parseInt(e.target.value));\r\n        setColumnCount(parseInt(e.target.value));\r\n        setGrid(freshGrid(parseInt(e.target.value), parseInt(e.target.value)));\r\n        setGeneration(0);\r\n        setGenZeroGrid(null);\r\n    }\r\n\r\n    const resetGrid = () => {\r\n        if (genZeroGrid !== null) setGrid(genZeroGrid);\r\n        setGeneration(0);\r\n        if (isRunning) setRunning(false);\r\n    }\r\n\r\n    const clearGrid = () => {\r\n        setGrid(freshGrid(rowCount, columnCount));\r\n        setGeneration(0);\r\n        if (isRunning) setRunning(false);\r\n    }\r\n\r\n    const incrementGeneration = () => {\r\n        const newGrid = grid.map((cellRow, i) => {\r\n            return cellRow.map((cell, j) => {\r\n                let neighbors = 0;\r\n                const newCell = {\r\n                    id: cell.id,\r\n                    isAlive: cell.isAlive\r\n                };\r\n\r\n                //check above\r\n                if (i !== 0) {\r\n                    if (j !== 0 && grid[i-1][j-1].isAlive) neighbors++;\r\n                    if (grid[i-1][j].isAlive) neighbors++;\r\n                    if (j !== (columnCount - 1) && grid[i-1][j+1].isAlive) neighbors++;\r\n                }\r\n\r\n                //check beside\r\n                if (j !== 0 && grid[i][j-1].isAlive) neighbors++;\r\n                if (j !== (columnCount - 1) && grid[i][j+1].isAlive) neighbors++;\r\n\r\n                //check below\r\n                if (i !== rowCount - 1) {\r\n                    if (j !== 0 && grid[i+1][j-1].isAlive) neighbors++;\r\n                    if (grid[i+1][j].isAlive) neighbors++;\r\n                    if (j !== (rowCount - 1) && grid[i+1][j+1].isAlive) neighbors++;\r\n                }\r\n\r\n                if (cell.isAlive && neighbors !== 2 && neighbors !== 3)  {\r\n                    newCell.isAlive = false;\r\n                } else if (!cell.isAlive && neighbors === 3) {\r\n                    newCell.isAlive = true;\r\n                }\r\n                return newCell;\r\n            })\r\n        })\r\n        setGrid(newGrid);\r\n        setGeneration((prevGeneration) => prevGeneration + 1);\r\n    }\r\n\r\n    const play = () => {\r\n        if (generation === 0) setGenZeroGrid(grid);\r\n        setRunning(true);\r\n    }\r\n\r\n    const pause = () => {\r\n        setRunning(false);\r\n    }\r\n\r\n    const step = () => {\r\n        if (generation === 0) setGenZeroGrid(grid);\r\n        incrementGeneration();\r\n    }\r\n\r\n    const changeSpeed = (sliderValue) => {\r\n        setTickPeriod(1000 / sliderValue);\r\n    }\r\n\r\n\r\n    useEffect( () => {\r\n        if (isRunning) {\r\n            interval.current = setInterval(incrementGeneration, tickPeriod);\r\n        }\r\n        return () => clearInterval(interval.current);\r\n    }, [grid, incrementGeneration, isRunning, tickPeriod])\r\n\r\n\r\n    return (\r\n        <div id='control-panel' className='container'>\r\n            <h3 className={'section-header'}>Controls</h3>\r\n            <div className={'buttons'}>\r\n                <div className='button-row'>\r\n                    <button onClick={step}>Step</button>\r\n                    <button onClick={isRunning ? pause : play}>{isRunning ? 'Pause' : 'Play'}</button>\r\n                    <button onClick={resetGrid}>Reset</button>\r\n                    <button onClick={clearGrid}>Clear</button>\r\n                </div>\r\n                <div className=\"speed-slider-wrapper\">\r\n                    <label htmlFor=\"speed-slider\">Speed:</label>\r\n                    <Slider\r\n                           id=\"speed-slider\"\r\n                           min={1}\r\n                           max={20}\r\n                           defaultValue={5}\r\n                           onChange={changeSpeed}\r\n                    />\r\n                </div>\r\n                <div className={'grid-select-wrapper'}>\r\n                    <label htmlFor='grid-size-select'>Grid Size:</label>\r\n                    <select value={rowCount.toString()}\r\n                            id='grid-size-select'\r\n                            onChange={changeGridDimensions}>\r\n                        <option value='10'>10 x 10</option>\r\n                        <option value='25' >25 x 25</option>\r\n                        <option value='50'>50 x 50</option>\r\n                        <option value='100'>100 x 100</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import './App.css';\r\nimport React, {useState} from 'react';\r\nimport CellGrid from \"./CellGrid\";\r\nimport InfoPanel from \"./InfoPanel\"\r\nimport ControlPanel from \"./ControlPanel\";\r\n\r\n\r\n\r\nfunction App() {\r\n    const [generation, setGeneration] = useState(0);\r\n    const [grid, setGrid] = useState(null);\r\n    const [rowCount, setRowCount] = useState(25);\r\n    const [columnCount, setColumnCount] = useState(25);\r\n\r\n    const updateCell = (id, isAlive) => {\r\n        const newGrid = [...grid];\r\n        newGrid[Math.floor(id / rowCount)][id % rowCount].isAlive = isAlive;\r\n        setGrid(newGrid);\r\n    }\r\n\r\n    const countLivingCells = (cellGrid) => {\r\n        let count = 0;\r\n        if(grid === null) return 0;\r\n\r\n        cellGrid.forEach( (cellRow) => {\r\n            count += cellRow.filter( (cell) => cell.isAlive).length;\r\n            }\r\n        )\r\n        return count;\r\n    }\r\n\r\n    const createFreshGrid = (rows, columns) => {\r\n        let nextId = 0;\r\n        const freshGrid = [];\r\n        for (let i = 0; i < rows; i++){\r\n            freshGrid.push([]);\r\n            for (let j = 0; j < columns; j++){\r\n                freshGrid[i].push({\r\n                    id: nextId,\r\n                    isAlive: false,\r\n                })\r\n                nextId++;\r\n            }\r\n        }\r\n        return freshGrid;\r\n    }\r\n\r\n    const createStartingGrid = (freshGrid) => {\r\n        //assume 25 x 25\r\n        freshGrid[18][7].isAlive = true;\r\n        freshGrid[18][9].isAlive = true;\r\n        freshGrid[17][8].isAlive = true;\r\n        freshGrid[17][9].isAlive = true;\r\n        freshGrid[16][8].isAlive = true;\r\n\r\n        return freshGrid;\r\n    }\r\n\r\n    if (grid === null) {\r\n        let freshGrid = createFreshGrid(rowCount, columnCount);\r\n        const startingGrid = createStartingGrid(freshGrid);\r\n        setGrid(startingGrid);\r\n    }\r\n\r\n    return (\r\n        <div className='main' style={(window.innerWidth > 960) ? {height: window.innerHeight} : {}}>\r\n            <div className={'container grid-container'}>\r\n                <h1 className='site-header'>John Conway's Game of Life</h1>\r\n                <h4>Generation: {generation}</h4>\r\n                <CellGrid\r\n                    updateCell={updateCell}\r\n                    grid={grid}\r\n                />\r\n            </div>\r\n            <ControlPanel\r\n                grid={grid}\r\n                setGrid={setGrid}\r\n                generation={generation}\r\n                setGeneration={setGeneration}\r\n                rowCount={rowCount}\r\n                setRowCount={setRowCount}\r\n                columnCount={columnCount}\r\n                setColumnCount={setColumnCount}\r\n                freshGrid={createFreshGrid}\r\n            />\r\n            <InfoPanel\r\n                generation={generation}\r\n                livingCellCount={countLivingCells(grid)}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}