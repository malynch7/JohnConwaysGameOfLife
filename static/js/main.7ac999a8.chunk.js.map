{"version":3,"sources":["Cell.js","CellGrid.js","InfoPanel.js","ControlPanel.js","App.js","index.js"],"names":["Cell","data","gridDimensions","updateCell","style","columns","width","className","isAlive","onClick","id","CellGrid","grid","map","cellRow","cell","rows","length","Math","floor","InfoPanel","generation","ControlPanel","setGrid","setGeneration","genZeroGrid","setGenZeroGrid","rowCount","setRowCount","columnCount","setColumnCount","freshGrid","interval","useRef","useState","isRunning","setRunning","tickPeriod","setTickPeriod","incrementGeneration","newGrid","i","j","neighbors","newCell","prevGeneration","useEffect","current","setInterval","clearInterval","htmlFor","min","max","defaultValue","onChange","sliderValue","value","toString","e","parseInt","target","App","nextId","push","window","innerWidth","height","innerHeight","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ac999a8.chunk.js","sourcesContent":["import './Cell.css';\r\n\r\nexport default function Cell({data, gridDimensions, updateCell}) {\r\n\r\n    const handleClick = () => {\r\n        updateCell(data.id, !data.isAlive);\r\n    }\r\n\r\n    const style = (gridDimensions.columns < 11) ? {} : {\r\n        width: `${100 / gridDimensions.columns}%`\r\n    }\r\n\r\n    return (\r\n        <div style={style}\r\n            className = {`cell ${data.isAlive ? 'alive' : ''}`}\r\n            onClick = {handleClick}\r\n        />\r\n    );\r\n}","import React from 'react';\r\n\r\nimport Cell from './Cell'\r\nimport './CellGrid.css';\r\n\r\nexport default function CellGrid({grid, updateCell}) {\r\n\r\n    return grid.map((cellRow) => {\r\n        return (\r\n            <div key={`row${Math.floor(cellRow[0].id)}`} className=\"cell-row\">\r\n                {\r\n                    cellRow.map((cell) => {\r\n                        return <Cell\r\n                            gridDimensions={{\r\n                                rows: grid.length,\r\n                                columns: grid[0].length\r\n                            }}\r\n                            className='cell'\r\n                            key={cell.id}\r\n                            data={cell}\r\n                            updateCell={updateCell}\r\n                        />\r\n                    })\r\n                }</div>\r\n        );\r\n    });\r\n}","import './InfoPanel.css';\r\n\r\nexport default function InfoPanel({generation}) {\r\n\r\n\r\n    return (\r\n        <div id=\"info-panel\" className={'container'}>\r\n            <h3 className={'section-header'}>Information</h3>\r\n            <h4>Generation: {generation}</h4>\r\n            <h4>Living Cells:</h4>\r\n            <h4>Rules</h4>\r\n            <ol>\r\n                <li>Any live cell with two or three live neighbours survives.</li>\r\n                <li>Any dead cell with three live neighbours becomes a live cell.</li>\r\n                <li>All other live cells die in the next generation. Similarly, all other dead cells stay dead.</li>\r\n            </ol>\r\n\r\n        </div>\r\n    );\r\n}","import React, {useState, useRef, useEffect} from 'react';\r\nimport Slider from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\nimport './ControlPanel.css';\r\n\r\nexport default function ControlPanel({grid, setGrid, generation, setGeneration, genZeroGrid, setGenZeroGrid, rowCount, setRowCount, columnCount, setColumnCount, freshGrid}) {\r\n\r\n    const interval = useRef(null);\r\n    const [isRunning, setRunning] = useState(false);\r\n    const [tickPeriod, setTickPeriod] = useState(200);\r\n\r\n    const changeGridDimensions = (e) => {\r\n        setRowCount(parseInt(e.target.value));\r\n        setColumnCount(parseInt(e.target.value));\r\n        setGrid(freshGrid(parseInt(e.target.value), parseInt(e.target.value)));\r\n        setGeneration(0);\r\n        setGenZeroGrid(null);\r\n    }\r\n\r\n    const resetGrid = () => {\r\n        if (genZeroGrid !== null) setGrid(genZeroGrid);\r\n        setGeneration(0);\r\n        if (isRunning) setRunning(false);\r\n    }\r\n\r\n    const clearGrid = () => {\r\n        setGrid(freshGrid(rowCount, columnCount));\r\n        setGeneration(0);\r\n        if (isRunning) setRunning(false);\r\n    }\r\n\r\n    const incrementGeneration = () => {\r\n        const newGrid = grid.map((cellRow, i) => {\r\n            return cellRow.map((cell, j) => {\r\n                let neighbors = 0;\r\n                const newCell = {\r\n                    id: cell.id,\r\n                    isAlive: cell.isAlive\r\n                };\r\n\r\n                //check above\r\n                if (i !== 0) {\r\n                    if (j !== 0 && grid[i-1][j-1].isAlive) neighbors++;\r\n                    if (grid[i-1][j].isAlive) neighbors++;\r\n                    if (j !== (columnCount - 1) && grid[i-1][j+1].isAlive) neighbors++;\r\n                }\r\n\r\n                //check beside\r\n                if (j !== 0 && grid[i][j-1].isAlive) neighbors++;\r\n                if (j !== (columnCount - 1) && grid[i][j+1].isAlive) neighbors++;\r\n\r\n                //check below\r\n                if (i !== rowCount - 1) {\r\n                    if (j !== 0 && grid[i+1][j-1].isAlive) neighbors++;\r\n                    if (grid[i+1][j].isAlive) neighbors++;\r\n                    if (j !== (rowCount - 1) && grid[i+1][j+1].isAlive) neighbors++;\r\n                }\r\n\r\n                if (cell.isAlive && neighbors !== 2 && neighbors !== 3)  {\r\n                    newCell.isAlive = false;\r\n                } else if (!cell.isAlive && neighbors === 3) {\r\n                    newCell.isAlive = true;\r\n                }\r\n                return newCell;\r\n            })\r\n        })\r\n        setGrid(newGrid);\r\n        setGeneration((prevGeneration) => prevGeneration + 1);\r\n    }\r\n\r\n    const play = () => {\r\n        if (generation === 0) setGenZeroGrid(grid);\r\n        setRunning(true);\r\n    }\r\n\r\n    const pause = () => {\r\n        setRunning(false);\r\n    }\r\n\r\n    const step = () => {\r\n        if (generation === 0) setGenZeroGrid(grid);\r\n        incrementGeneration();\r\n    }\r\n\r\n    const changeSpeed = (sliderValue) => {\r\n        setTickPeriod(1000 / sliderValue);\r\n    }\r\n\r\n    useEffect( () => {\r\n        if (isRunning) {\r\n            interval.current = setInterval(incrementGeneration, tickPeriod);\r\n        }\r\n        return () => clearInterval(interval.current);\r\n    }, [grid, incrementGeneration, isRunning, tickPeriod])\r\n\r\n\r\n\r\n    return (\r\n        <div id='control-panel' className='container'>\r\n            <h3 className={'section-header'}>Controls</h3>\r\n            <h4>Generation: {generation}</h4>\r\n            <div className={'buttons'}>\r\n                <div className='button-row'>\r\n                    <button onClick={step}>Step</button>\r\n                    <button onClick={isRunning ? pause : play}>{isRunning ? 'Pause' : 'Play'}</button>\r\n                    <button onClick={resetGrid}>Reset</button>\r\n                    <button onClick={clearGrid}>Clear</button>\r\n                </div>\r\n                <div className=\"speed-slider-wrapper\">\r\n                    <label htmlFor=\"speed-slider\">Speed:</label>\r\n                    <Slider\r\n                           id=\"speed-slider\"\r\n                           min={1}\r\n                           max={20}\r\n                           defaultValue={5}\r\n                           onChange={changeSpeed}\r\n                    />\r\n                </div>\r\n                <div className={'grid-select-wrapper'}>\r\n                    <label htmlFor='grid-size-select'>Grid Size:</label>\r\n                    <select value={rowCount.toString()}\r\n                            id='grid-size-select'\r\n                            onChange={changeGridDimensions}>\r\n                        <option value='10'>10 x 10</option>\r\n                        <option value='25' >25 x 25</option>\r\n                        <option value='50'>50 x 50</option>\r\n                        <option value='100'>100 x 100</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import './App.css';\r\nimport React, {useState} from 'react';\r\nimport CellGrid from \"./CellGrid\";\r\nimport InfoPanel from \"./InfoPanel\"\r\nimport ControlPanel from \"./ControlPanel\";\r\n\r\n\r\n\r\nfunction App() {\r\n    const [generation, setGeneration] = useState(0);\r\n    const [grid, setGrid] = useState(null);\r\n    const [genZeroGrid, setGenZeroGrid] = useState(null);\r\n    const [rowCount, setRowCount] = useState(25);\r\n    const [columnCount, setColumnCount] = useState(25);\r\n\r\n    const updateCell = (id, isAlive) => {\r\n        const newGrid = [...grid];\r\n        newGrid[Math.floor(id / rowCount)][id % rowCount].isAlive = isAlive;\r\n        setGrid(newGrid);\r\n    }\r\n\r\n    const freshGrid = (rows, columns) => {\r\n        let nextId = 0;\r\n        const freshGrid = [];\r\n        for (let i = 0; i < rows; i++){\r\n            freshGrid.push([]);\r\n            for (let j = 0; j < columns; j++){\r\n                freshGrid[i].push({\r\n                    id: nextId,\r\n                    isAlive: false,\r\n                })\r\n                nextId++;\r\n            }\r\n        }\r\n        return freshGrid;\r\n    }\r\n\r\n    if (grid === null) setGrid(freshGrid(rowCount, columnCount));\r\n\r\n    return (\r\n        <div className='main' style={(window.innerWidth > 960) ? {height: window.innerHeight} : {}}>\r\n            <div className={'container grid-container'}>\r\n                <h1 className='site-header'>React Life</h1>\r\n                <CellGrid\r\n                    updateCell={updateCell}\r\n                    grid={grid}\r\n                />\r\n            </div>\r\n            <ControlPanel\r\n                grid={grid}\r\n                setGrid={setGrid}\r\n                generation={generation}\r\n                setGeneration={setGeneration}\r\n                genZeroGrid={genZeroGrid}\r\n                setGenZeroGrid={setGenZeroGrid}\r\n                rowCount={rowCount}\r\n                setRowCount={setRowCount}\r\n                columnCount={columnCount}\r\n                setColumnCount={setColumnCount}\r\n                freshGrid={freshGrid}\r\n            />\r\n            <InfoPanel\r\n                generation={generation}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}