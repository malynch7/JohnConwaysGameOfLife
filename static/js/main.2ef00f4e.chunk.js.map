{"version":3,"sources":["Cell.js","CellGrid.js","InfoPanel.js","ControlPanel.js","App.js","index.js"],"names":["Cell","data","gridDimensions","applyPatternToGrid","hover","showHoverPattern","removeHoverPattern","style","columns","width","className","isAlive","onClick","id","onMouseEnter","onMouseLeave","CellGrid","grid","setGrid","rowCount","pattern","patterns","useState","hoverIds","setHoverIds","origin","Math","floor","ids","forEach","cell","push","cellRow","target","nextGrid","map","rows","length","includes","InfoPanel","generation","livingCellCount","totalCells","ControlPanel","setGeneration","setRowCount","columnCount","setColumnCount","freshGrid","setPattern","interval","useRef","isRunning","setRunning","tickPeriod","setTickPeriod","genZeroGrid","setGenZeroGrid","incrementGeneration","useCallback","newGrid","i","j","neighbors","newCell","prevGeneration","useEffect","current","setInterval","clearInterval","htmlFor","min","max","defaultValue","onChange","sliderValue","value","e","Object","keys","key","toString","parseInt","App","createFreshGrid","nextId","createStartingGrid","window","innerWidth","height","innerHeight","cellGrid","count","filter","countLivingCells","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0UAEe,SAASA,EAAT,GAAwG,IAAzFC,EAAwF,EAAxFA,KAAMC,EAAkF,EAAlFA,eAAgBC,EAAkE,EAAlEA,mBAAoBC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,iBAAkBC,EAAqB,EAArBA,mBAEvFC,EAASL,EAAeM,QAAU,GAAM,GAAK,CAC/CC,MAAM,GAAD,OAAK,IAAMP,EAAeM,QAA1B,MAGT,OACI,qBAAKD,MAAOA,EACRG,UAAS,cAAST,EAAKU,QAAU,SAAW,GAAnC,YAAyCP,EAAQ,iBAAmB,IAC7EQ,QAAS,kBAAMT,EAAmBF,EAAKY,KACtCC,aAAc,kBAAMT,EAAiBJ,EAAKY,KAC1CE,aAAcT,I,MCRZ,SAASU,EAAT,GAAiE,IAA9CC,EAA6C,EAA7CA,KAAMC,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,SAAW,EAE3CC,mBAAS,IAFkC,mBAEpEC,EAFoE,KAE1DC,EAF0D,KAIrEnB,EAAmB,SAACQ,GAEtB,IAAMY,EAAS,CAACC,KAAKC,MAAMd,EAAKM,GAAWN,EAAKM,GAC5CS,EAAM,GAENX,EAAKQ,EAAO,IAAIA,EAAO,IAAId,UAEf,QAAZS,EACAH,EAAKQ,EAAO,IAAII,SAAS,SAAAC,GACrBF,EAAIG,KAAKD,EAAKjB,OAID,WAAZO,GACLH,EAAKY,SAAS,SAAAG,GACVJ,EAAIG,KAAKC,EAAQP,EAAO,IAAIZ,OAIpCQ,EAASD,GAASS,SAAS,SAACI,GACxB,IACIL,EAAIG,KAAKd,EAAKQ,EAAO,GAAKQ,EAAO,IAAIR,EAAO,GAAKQ,EAAO,IAAIpB,IAEhE,cAGJW,EAAYI,KAGVtB,EAAqB,WAEvBkB,EAAY,KAGVrB,EAAqB,SAACU,GACxB,IAAMqB,EAAQ,YAAOjB,GACfQ,EAAS,CAACC,KAAKC,MAAMd,EAAKM,GAAWN,EAAKM,IAED,IAA3Ce,EAAST,EAAO,IAAIA,EAAO,IAAId,QAC/BuB,EAAST,EAAO,IAAIA,EAAO,IAAId,SAAU,GAGzB,QAAZS,EACAc,EAAST,EAAO,IAAII,SAAS,SAACC,GAC1BA,EAAKnB,SAAU,KAGF,WAAZS,GACLc,EAASL,SAAS,SAAAG,GACdA,EAAQP,EAAO,IAAId,SAAU,KAIjBU,EAASD,GAEjBS,SAAS,SAACI,GAClB,IACIC,EAAST,EAAO,GAAKQ,EAAO,IAAIR,EAAO,GAAKQ,EAAO,IAAItB,SAAU,EAErE,eAGRO,EAAQgB,IAGZ,OAAOjB,EAAKkB,KAAI,SAACH,GACb,OACI,qBAA6CtB,UAAU,WAAvD,SAEQsB,EAAQG,KAAI,SAACL,GACT,OAAO,cAAC,EAAD,CACH5B,eAAgB,CACZkC,KAAMnB,EAAKoB,OACX7B,QAASS,EAAK,GAAGoB,QAErBjC,MAAOmB,EAASe,SAASR,EAAKjB,IAE9BZ,KAAM6B,EACN3B,mBAAoBA,EACpBE,iBAAkBA,EAClBC,mBAAoBA,GAJfwB,EAAKjB,QAT1B,aAAgBa,KAAKC,MAAMK,EAAQ,GAAGnB,S,MC1EnC,SAAS0B,EAAT,GAA+D,IAA3CC,EAA0C,EAA1CA,WAAYC,EAA8B,EAA9BA,gBAAiBC,EAAa,EAAbA,WAG5D,OACI,sBAAK7B,GAAG,aAAaH,UAAW,YAAhC,UACI,oBAAIA,UAAW,iBAAf,yBACA,wCACA,+BACI,2FACA,+FACA,gIAEJ,8CAAiB8B,KACjB,gDAAmBC,KACnB,+CAAkBC,Q,wBCXf,SAASC,EAAT,GACsF,IAD/D1B,EAC8D,EAD9DA,KAAMC,EACwD,EADxDA,QAASsB,EAC+C,EAD/CA,WAAYI,EACmC,EADnCA,cAAezB,EACoB,EADpBA,SAAU0B,EACU,EADVA,YAAaC,EACH,EADGA,YAC9DC,EAA2D,EAA3DA,eAAgBC,EAA2C,EAA3CA,UAAW3B,EAAgC,EAAhCA,SAAUD,EAAsB,EAAtBA,QAAS6B,EAAa,EAAbA,WAE7EC,EAAWC,iBAAO,MAFwE,EAGhE7B,oBAAS,GAHuD,mBAGzF8B,EAHyF,KAG9EC,EAH8E,OAI5D/B,mBAAS,KAJmD,mBAIzFgC,EAJyF,KAI7EC,EAJ6E,OAK1DjC,mBAAS,MALiD,mBAKzFkC,EALyF,KAK5EC,EAL4E,KA2B1FC,EAAsBC,uBAAY,WACpC,IAAMC,EAAU3C,EAAKkB,KAAI,SAACH,EAAS6B,GAC/B,OAAO7B,EAAQG,KAAI,SAACL,EAAMgC,GACtB,IAAIC,EAAY,EACVC,EAAU,CACZnD,GAAIiB,EAAKjB,GACTF,QAASmB,EAAKnB,SAuBlB,OApBU,IAANkD,IACU,IAANC,GAAW7C,EAAK4C,EAAE,GAAGC,EAAE,GAAGnD,SAASoD,IACnC9C,EAAK4C,EAAE,GAAGC,GAAGnD,SAASoD,IACtBD,IAAOhB,EAAc,GAAM7B,EAAK4C,EAAE,GAAGC,EAAE,GAAGnD,SAASoD,KAGjD,IAAND,GAAW7C,EAAK4C,GAAGC,EAAE,GAAGnD,SAASoD,IACjCD,IAAOhB,EAAc,GAAM7B,EAAK4C,GAAGC,EAAE,GAAGnD,SAASoD,IAEjDF,IAAM1C,EAAW,IACP,IAAN2C,GAAW7C,EAAK4C,EAAE,GAAGC,EAAE,GAAGnD,SAASoD,IACnC9C,EAAK4C,EAAE,GAAGC,GAAGnD,SAASoD,IACtBD,IAAO3C,EAAW,GAAMF,EAAK4C,EAAE,GAAGC,EAAE,GAAGnD,SAASoD,KAGpDjC,EAAKnB,SAAyB,IAAdoD,GAAiC,IAAdA,EACnCC,EAAQrD,SAAU,EACVmB,EAAKnB,SAAyB,IAAdoD,IACxBC,EAAQrD,SAAU,GAEfqD,QAGf9C,EAAQ0C,GACRhB,GAAc,SAACqB,GAAD,OAAoBA,EAAiB,OACpD,CAAChD,EAAMC,EAASC,EAAU2B,EAAaF,IA6B1C,OARAsB,qBAAW,WAIP,OAHId,IACAF,EAASiB,QAAUC,YAAYV,EAAqBJ,IAEjD,kBAAMe,cAAcnB,EAASiB,YACrC,CAAClD,EAAKyC,EAAqBN,EAAWE,IAIrC,sBAAKzC,GAAG,gBAAgBH,UAAU,YAAlC,UACI,oBAAIA,UAAW,iBAAf,sBACA,sBAAKA,UAAW,UAAhB,UACI,sBAAKA,UAAU,aAAf,UACI,wBAAQE,QAvBX,WACU,IAAf4B,GAAkBiB,EAAexC,GACrCyC,KAqBY,kBACA,wBAAQ9C,QAASwC,EA5BnB,WACVC,GAAW,IANF,WACU,IAAfb,GAAkBiB,EAAexC,GACrCoC,GAAW,IA+BC,SAA4CD,EAAY,QAAU,SAClE,wBAAQxC,QAlFN,WACM,OAAhB4C,GAAsBtC,EAAQsC,GAClCZ,EAAc,GACVQ,GAAWC,GAAW,IA+Ed,mBACA,wBAAQzC,QA7EN,WACdM,EAAQ8B,EAAU7B,EAAU2B,IAC5BF,EAAc,GACVQ,GAAWC,GAAW,IA0Ed,sBAEJ,sBAAK3C,UAAU,uBAAf,UACA,uBAAO4D,QAAQ,eAAf,oBACA,cAAC,IAAD,CACIzD,GAAG,eACH0D,IAAK,EACLC,IAAK,GACLC,aAAc,EACdC,SA9BI,SAACC,GACjBpB,EAAc,IAAOoB,SAgCb,sBAAKjE,UAAW,wCAAhB,UACI,uBAAO4D,QAAQ,iBAAf,sBACA,wBAAQM,MAAOxD,EACPP,GAAG,iBACHH,UAAW,WACXgE,SAAU,SAACG,GAAD,OAAO5B,EAAW4B,EAAE5C,OAAO2C,QAH7C,SAIME,OAAOC,KAAK1D,GAAUc,KAAK,SAAC6C,GAC1B,OAAO,wBAAkBJ,MAAOI,EAAzB,SAA+BA,GAAlBA,WAKhC,sBAAKtE,UAAW,qCAAhB,UACI,uBAAO4D,QAAQ,mBAAf,wBACA,yBAAQM,MAAOzD,EAAS8D,WAChBpE,GAAG,mBACHH,UAAW,WACXgE,SAxHK,SAACG,GAC1BhC,EAAYqC,SAASL,EAAE5C,OAAO2C,QAC9B7B,EAAemC,SAASL,EAAE5C,OAAO2C,QACjC1D,EAAQ8B,EAAUkC,SAASL,EAAE5C,OAAO2C,OAAQM,SAASL,EAAE5C,OAAO2C,SAC9DhC,EAAc,GACda,EAAe,OAgHH,UAII,wBAAQmB,MAAM,KAAd,qBACA,wBAAQA,MAAM,KAAd,qBACA,wBAAQA,MAAM,KAAd,iCC1BTO,MAvGf,WAAgB,IAAD,EAEyB7D,mBAAS,GAFlC,mBAEJkB,EAFI,KAEQI,EAFR,OAGatB,mBAAS,MAHtB,mBAGJL,EAHI,KAGEC,EAHF,OAIqBI,mBAAS,IAJ9B,mBAIJH,EAJI,KAIM0B,EAJN,OAK2BvB,mBAAS,IALpC,mBAKJwB,EALI,KAKSC,EALT,OAMmBzB,mBAAS,QAN5B,mBAMJF,EANI,KAMK6B,EANL,KAQL5B,EAAW,CAIb,KAAQ,CAAC,CAAC,EAAE,IACZ,QAAW,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,IAC9B,OAAU,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,GAAG,GAAI,CAAC,EAAE,IAC5C,UAAa,CAAC,EAAE,EAAE,GAAI,EAAE,EAAE,GAAI,EAAE,GAAG,GAAI,EAAE,GAAG,GAAI,EAAE,EAAE,GAAI,EAAE,EAAE,GAAI,CAAC,GAAG,GAAI,CAAC,GAAG,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAI,CAAC,GAAG,IACzG,cAAe,CAAC,EAAE,EAAE,GAAI,EAAE,EAAE,GAAI,CAAC,GAAG,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,IAClD,MAAS,CAAC,EAAE,GAAG,GAAI,CAAC,EAAE,GAAI,CAAC,GAAG,GAAI,CAAC,GAAG,GAAI,CAAC,EAAE,GAAI,CAAC,EAAE,GAAG,CAAC,EAAE,IAC1D,IAAQ,GACR,OAAW,IAeT+D,EAAkB,SAAChD,EAAM5B,GAG3B,IAFA,IAAI6E,EAAS,EACPrC,EAAY,GACTa,EAAI,EAAGA,EAAIzB,EAAMyB,IAAI,CAC1Bb,EAAUjB,KAAK,IACf,IAAK,IAAI+B,EAAI,EAAGA,EAAItD,EAASsD,IACzBd,EAAUa,GAAG9B,KAAK,CACdlB,GAAIwE,EACJ1E,SAAS,IAEb0E,IAGR,OAAOrC,GAoBX,OANa,OAAT/B,GAGAC,EAduB,SAAC8B,GAQxB,OANAA,EAAU,IAAI,GAAGrC,SAAU,EAC3BqC,EAAU,IAAI,GAAGrC,SAAU,EAC3BqC,EAAU,IAAI,GAAGrC,SAAU,EAC3BqC,EAAU,IAAI,GAAGrC,SAAU,EAC3BqC,EAAU,IAAI,GAAGrC,SAAU,EAEpBqC,EAKcsC,CADLF,EAAgBjE,EAAU2B,KAM1C,sBAAKpC,UAAU,OAAOH,MAAQgF,OAAOC,WAAa,IAAO,CAACC,OAAQF,OAAOG,aAAe,GAAxF,UACI,sBAAKhF,UAAW,2BAAhB,UACI,oBAAIA,UAAU,cAAd,wCACA,8CAAiB8B,KACjB,cAAC,EAAD,CACIvB,KAAMA,EACNC,QAASA,EACTC,SAAUA,EACVE,SAAUA,EACVD,QAASA,OAGjB,cAAC,EAAD,CACIH,KAAMA,EACNC,QAASA,EACTsB,WAAYA,EACZI,cAAeA,EACfzB,SAAUA,EACV0B,YAAaA,EACbC,YAAaA,EACbC,eAAgBA,EAChBC,UAAWoC,EACX/D,SAAUA,EACVD,QAASA,EACT6B,WAAYA,IAEhB,cAAC,EAAD,CACIT,WAAYA,EACZE,WAAYvB,EAAW2B,EACvBL,gBA1Ea,SAACkD,GACtB,IAAIC,EAAQ,EACZ,OAAY,OAAT3E,EAAsB,GAEzB0E,EAAS9D,SAAS,SAACG,GACf4D,GAAS5D,EAAQ6D,QAAQ,SAAC/D,GAAD,OAAUA,EAAKnB,WAAS0B,UAG9CuD,GAkEkBE,CAAiB7E,SCnGlD8E,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2ef00f4e.chunk.js","sourcesContent":["import './Cell.css';\r\n\r\nexport default function Cell({data, gridDimensions, applyPatternToGrid, hover, showHoverPattern, removeHoverPattern}) {\r\n\r\n    const style = (gridDimensions.columns < 11) ? {} : {\r\n        width: `${100 / gridDimensions.columns}%`\r\n    }\r\n\r\n    return (\r\n        <div style={style}\r\n            className={`cell${data.isAlive ? ' alive' : ''} ${hover ? ' hover-pattern' : ''}`}\r\n            onClick={() => applyPatternToGrid(data.id)}\r\n             onMouseEnter={() => showHoverPattern(data.id)}\r\n             onMouseLeave={removeHoverPattern}\r\n        />\r\n    );\r\n}","import React, {useState} from 'react';\r\n\r\nimport Cell from './Cell'\r\nimport './CellGrid.css';\r\n\r\nexport default function CellGrid({grid, setGrid, rowCount, pattern, patterns}) {\r\n\r\n    const [hoverIds, setHoverIds] = useState([]);\r\n\r\n    const showHoverPattern = (id) => {\r\n\r\n        const origin = [Math.floor(id / rowCount), id % rowCount];\r\n        let ids = [];\r\n\r\n        if (grid[origin[0]][origin[1]].isAlive) return;\r\n\r\n        if (pattern === 'Row'){\r\n            grid[origin[0]].forEach( cell => {\r\n                ids.push(cell.id);\r\n            });\r\n        }\r\n\r\n        else if (pattern === 'Column'){\r\n            grid.forEach( cellRow => {\r\n                ids.push(cellRow[origin[1]].id);\r\n            })\r\n        }\r\n\r\n        patterns[pattern].forEach( (target) => {\r\n            try {\r\n                ids.push(grid[origin[0] + target[0]][origin[1] + target[1]].id);\r\n            }\r\n            catch {}\r\n        });\r\n\r\n        setHoverIds(ids);\r\n    }\r\n\r\n    const removeHoverPattern = () => {\r\n\r\n        setHoverIds([]);\r\n    }\r\n\r\n    const applyPatternToGrid = (id) => {\r\n        const nextGrid = [...grid];\r\n        const origin = [Math.floor(id / rowCount), id % rowCount];\r\n\r\n        if (nextGrid[origin[0]][origin[1]].isAlive === true) {\r\n            nextGrid[origin[0]][origin[1]].isAlive = false;\r\n        }\r\n        else {\r\n            if (pattern === 'Row'){\r\n                nextGrid[origin[0]].forEach( (cell) => {\r\n                    cell.isAlive = true;\r\n                });\r\n            }\r\n            else if (pattern === 'Column'){\r\n                nextGrid.forEach( cellRow => {\r\n                    cellRow[origin[1]].isAlive = true;\r\n                })\r\n            }\r\n\r\n            const coordinates = patterns[pattern];\r\n\r\n            coordinates.forEach( (target) => {\r\n                try {\r\n                    nextGrid[origin[0] + target[0]][origin[1] + target[1]].isAlive = true;\r\n                }\r\n                catch {}\r\n            });\r\n        }\r\n        setGrid(nextGrid);\r\n    }\r\n\r\n    return grid.map((cellRow) => {\r\n        return (\r\n            <div key={`row${Math.floor(cellRow[0].id)}`} className=\"cell-row\">\r\n                {\r\n                    cellRow.map((cell) => {\r\n                        return <Cell\r\n                            gridDimensions={{\r\n                                rows: grid.length,\r\n                                columns: grid[0].length\r\n                            }}\r\n                            hover={hoverIds.includes(cell.id)}\r\n                            key={cell.id}\r\n                            data={cell}\r\n                            applyPatternToGrid={applyPatternToGrid}\r\n                            showHoverPattern={showHoverPattern}\r\n                            removeHoverPattern={removeHoverPattern}\r\n                        />\r\n                    })\r\n                }</div>\r\n        );\r\n    });\r\n}","import './InfoPanel.css';\r\n\r\nexport default function InfoPanel({generation, livingCellCount, totalCells}) {\r\n\r\n\r\n    return (\r\n        <div id=\"info-panel\" className={'container'}>\r\n            <h3 className={'section-header'}>Information</h3>\r\n            <h4>Rules:</h4>\r\n            <ol>\r\n                <li>Any live cell with two or three live neighbours survives.</li>\r\n                <li>Any dead cell with three live neighbours becomes a live cell.</li>\r\n                <li>All other live cells die in the next generation. Similarly, all other dead cells stay dead.</li>\r\n            </ol>\r\n            <h4>Generation: {generation}</h4>\r\n            <h4>Living Cells: {livingCellCount}</h4>\r\n            <h4>Total Cells: {totalCells}</h4>\r\n        </div>\r\n    );\r\n}","import React, {useState, useRef, useEffect, useCallback} from 'react';\r\nimport Slider from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\nimport './ControlPanel.css';\r\n\r\nexport default function ControlPanel({grid, setGrid, generation, setGeneration, rowCount, setRowCount, columnCount,\r\n                                         setColumnCount, freshGrid, patterns, pattern, setPattern}) {\r\n\r\n    const interval = useRef(null);\r\n    const [isRunning, setRunning] = useState(false);\r\n    const [tickPeriod, setTickPeriod] = useState(200);\r\n    const [genZeroGrid, setGenZeroGrid] = useState(null);\r\n\r\n    const changeGridDimensions = (e) => {\r\n        setRowCount(parseInt(e.target.value));\r\n        setColumnCount(parseInt(e.target.value));\r\n        setGrid(freshGrid(parseInt(e.target.value), parseInt(e.target.value)));\r\n        setGeneration(0);\r\n        setGenZeroGrid(null);\r\n    }\r\n\r\n    const resetGrid = () => {\r\n        if (genZeroGrid !== null) setGrid(genZeroGrid);\r\n        setGeneration(0);\r\n        if (isRunning) setRunning(false);\r\n    }\r\n\r\n    const clearGrid = () => {\r\n        setGrid(freshGrid(rowCount, columnCount));\r\n        setGeneration(0);\r\n        if (isRunning) setRunning(false);\r\n    }\r\n\r\n    const incrementGeneration = useCallback(() => {\r\n        const newGrid = grid.map((cellRow, i) => {\r\n            return cellRow.map((cell, j) => {\r\n                let neighbors = 0;\r\n                const newCell = {\r\n                    id: cell.id,\r\n                    isAlive: cell.isAlive\r\n                };\r\n                //check above\r\n                if (i !== 0) {\r\n                    if (j !== 0 && grid[i-1][j-1].isAlive) neighbors++;\r\n                    if (grid[i-1][j].isAlive) neighbors++;\r\n                    if (j !== (columnCount - 1) && grid[i-1][j+1].isAlive) neighbors++;\r\n                }\r\n                //check beside\r\n                if (j !== 0 && grid[i][j-1].isAlive) neighbors++;\r\n                if (j !== (columnCount - 1) && grid[i][j+1].isAlive) neighbors++;\r\n                //check below\r\n                if (i !== rowCount - 1) {\r\n                    if (j !== 0 && grid[i+1][j-1].isAlive) neighbors++;\r\n                    if (grid[i+1][j].isAlive) neighbors++;\r\n                    if (j !== (rowCount - 1) && grid[i+1][j+1].isAlive) neighbors++;\r\n                }\r\n\r\n                if (cell.isAlive && neighbors !== 2 && neighbors !== 3)  {\r\n                    newCell.isAlive = false;\r\n                } else if (!cell.isAlive && neighbors === 3) {\r\n                    newCell.isAlive = true;\r\n                }\r\n                return newCell;\r\n            })\r\n        })\r\n        setGrid(newGrid);\r\n        setGeneration((prevGeneration) => prevGeneration + 1);\r\n    }, [grid, setGrid, rowCount, columnCount, setGeneration]);\r\n\r\n    const play = () => {\r\n        if (generation === 0) setGenZeroGrid(grid);\r\n        setRunning(true);\r\n    }\r\n\r\n    const pause = () => {\r\n        setRunning(false);\r\n    }\r\n\r\n    const step = () => {\r\n        if (generation === 0) setGenZeroGrid(grid);\r\n        incrementGeneration();\r\n    }\r\n\r\n    const changeSpeed = (sliderValue) => {\r\n        setTickPeriod(1000 / sliderValue);\r\n    }\r\n\r\n\r\n    useEffect( () => {\r\n        if (isRunning) {\r\n            interval.current = setInterval(incrementGeneration, tickPeriod);\r\n        }\r\n        return () => clearInterval(interval.current);\r\n    }, [grid,incrementGeneration, isRunning, tickPeriod])\r\n\r\n\r\n    return (\r\n        <div id='control-panel' className='container'>\r\n            <h3 className={'section-header'}>Controls</h3>\r\n            <div className={'buttons'}>\r\n                <div className='button-row'>\r\n                    <button onClick={step}>Step</button>\r\n                    <button onClick={isRunning ? pause : play}>{isRunning ? 'Pause' : 'Play'}</button>\r\n                    <button onClick={resetGrid}>Reset</button>\r\n                    <button onClick={clearGrid}>Clear</button>\r\n                </div>\r\n                <div className=\"speed-slider-wrapper\">\r\n                <label htmlFor=\"speed-slider\">Speed:</label>\r\n                <Slider\r\n                    id=\"speed-slider\"\r\n                    min={1}\r\n                    max={20}\r\n                    defaultValue={5}\r\n                    onChange={changeSpeed}\r\n                    />\r\n                </div>\r\n                <div className={'select-wrapper pattern-select-wrapper'}>\r\n                    <label htmlFor='pattern-select'>Pattern:</label>\r\n                    <select value={pattern}\r\n                            id='pattern-select'\r\n                            className={'u-select'}\r\n                            onChange={(e) => setPattern(e.target.value)}>\r\n                        { Object.keys(patterns).map( (key) => {\r\n                            return <option key={key} value={key}>{key}</option>;\r\n                        })}\r\n\r\n                    </select>\r\n                </div>\r\n                <div className={'select-wrapper grid-select-wrapper'}>\r\n                    <label htmlFor='grid-size-select'>Grid Size:</label>\r\n                    <select value={rowCount.toString()}\r\n                            id='grid-size-select'\r\n                            className={'u-select'}\r\n                            onChange={changeGridDimensions}>\r\n                        <option value='10'>10 x 10</option>\r\n                        <option value='25' >25 x 25</option>\r\n                        <option value='50'>50 x 50</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import './App.css';\r\nimport React, {useState} from 'react';\r\nimport CellGrid from \"./CellGrid\";\r\nimport InfoPanel from \"./InfoPanel\"\r\nimport ControlPanel from \"./ControlPanel\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const [generation, setGeneration] = useState(0);\r\n    const [grid, setGrid] = useState(null);\r\n    const [rowCount, setRowCount] = useState(25);\r\n    const [columnCount, setColumnCount] = useState(25);\r\n    const [pattern, setPattern] = useState('Cell');\r\n\r\n    const patterns = {\r\n        // Each pattern contains a set of coordinates to be toggled, represented as [row, column]\r\n        // positional shifts from the origin.\r\n\r\n        'Cell': [[0,0]],\r\n        'Blinker': [[-1,0], [0,0], [1,0]],\r\n        'Glider': [[-1,0], [0,0], [0,1], [1,-1], [1,1]],\r\n        'Spaceship': [[-2,0], [-2,1], [-1,-2], [-1,-1], [-1,1], [-1,2], [0,-2], [0,-1], [0,0], [0,1], [1,0], [1,-1]],\r\n        'R-Pentamino': [[-1,0], [-1,1], [0,-1], [0,0], [1,0]],\r\n        'Acorn': [[-1,-2], [0,0], [1,-3], [1,-2], [1,1], [1,2],[1,3]],\r\n        'Row' : [],\r\n        'Column' : [],\r\n    };\r\n\r\n\r\n    const countLivingCells = (cellGrid) => {\r\n        let count = 0;\r\n        if(grid === null) return 0;\r\n\r\n        cellGrid.forEach( (cellRow) => {\r\n            count += cellRow.filter( (cell) => cell.isAlive).length;\r\n            }\r\n        )\r\n        return count;\r\n    }\r\n\r\n    const createFreshGrid = (rows, columns) => {\r\n        let nextId = 0;\r\n        const freshGrid = [];\r\n        for (let i = 0; i < rows; i++){\r\n            freshGrid.push([]);\r\n            for (let j = 0; j < columns; j++){\r\n                freshGrid[i].push({\r\n                    id: nextId,\r\n                    isAlive: false,\r\n                })\r\n                nextId++;\r\n            }\r\n        }\r\n        return freshGrid;\r\n    }\r\n\r\n    const createStartingGrid = (freshGrid) => {\r\n        // assume 25 x 25\r\n        freshGrid[18][7].isAlive = true;\r\n        freshGrid[18][9].isAlive = true;\r\n        freshGrid[17][8].isAlive = true;\r\n        freshGrid[17][9].isAlive = true;\r\n        freshGrid[16][8].isAlive = true;\r\n\r\n        return freshGrid;\r\n    }\r\n\r\n    if (grid === null) {\r\n        let freshGrid = createFreshGrid(rowCount, columnCount);\r\n        const startingGrid = createStartingGrid(freshGrid);\r\n        setGrid(startingGrid);\r\n    }\r\n\r\n    return (\r\n        <div className='main' style={(window.innerWidth > 960) ? {height: window.innerHeight} : {}}>\r\n            <div className={'container grid-container'}>\r\n                <h1 className='site-header'>John Conway's Game of Life</h1>\r\n                <h4>Generation: {generation}</h4>\r\n                <CellGrid\r\n                    grid={grid}\r\n                    setGrid={setGrid}\r\n                    rowCount={rowCount}\r\n                    patterns={patterns}\r\n                    pattern={pattern}\r\n                />\r\n            </div>\r\n            <ControlPanel\r\n                grid={grid}\r\n                setGrid={setGrid}\r\n                generation={generation}\r\n                setGeneration={setGeneration}\r\n                rowCount={rowCount}\r\n                setRowCount={setRowCount}\r\n                columnCount={columnCount}\r\n                setColumnCount={setColumnCount}\r\n                freshGrid={createFreshGrid}\r\n                patterns={patterns}\r\n                pattern={pattern}\r\n                setPattern={setPattern}\r\n            />\r\n            <InfoPanel\r\n                generation={generation}\r\n                totalCells={rowCount * columnCount}\r\n                livingCellCount={countLivingCells(grid)}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}