{"version":3,"sources":["Cell.js","CellGrid.js","InfoPanel.js","ControlPanel.js","App.js","index.js"],"names":["Cell","data","gridDimensions","updateGrid","style","columns","width","className","isAlive","onClick","id","CellGrid","grid","updateCell","map","cellRow","cell","rows","length","Math","floor","InfoPanel","generation","ControlPanel","rowCount","isRunning","step","play","pause","changeGridDimensions","resetGrid","clearGrid","htmlFor","value","toString","onChange","App","interval","useRef","useState","setRowCount","columnCount","setColumnCount","setGeneration","setRunning","setGrid","genZeroGrid","setGenZeroGrid","freshGrid","nextId","i","push","j","incrementGeneration","newGrid","neighbors","newCell","prevGeneration","useEffect","current","setInterval","clearInterval","height","window","innerHeight","e","parseInt","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f0f29505.chunk.js","sourcesContent":["import './Cell.css';\r\n\r\nexport default function Cell({data, gridDimensions, updateGrid}) {\r\n\r\n    const handleClick = () => {\r\n        updateGrid(data.id, !data.isAlive);\r\n    }\r\n\r\n    const style = (gridDimensions.columns < 11) ? {} : {\r\n        width: `${100 / gridDimensions.columns}%`\r\n    }\r\n\r\n    return (\r\n        <div style={style}\r\n            className = {`cell ${data.isAlive ? 'alive' : ''}`}\r\n            onClick = {handleClick}\r\n        />\r\n    );\r\n}","import React, {useState} from 'react';\r\n\r\nimport Cell from './Cell'\r\nimport './CellGrid.css';\r\n\r\nexport default function CellGrid({grid, updateCell}) {\r\n\r\n    return grid.map((cellRow) => {\r\n        return (\r\n            <div key={`row${Math.floor(cellRow[0].id)}`} className=\"cell-row\">\r\n                {\r\n                    cellRow.map((cell) => {\r\n                        return <Cell\r\n                            gridDimensions={{\r\n                                rows: grid.length,\r\n                                columns: grid[0].length\r\n                            }}\r\n                            className='cell'\r\n                            key={cell.id}\r\n                            data={cell}\r\n                            updateGrid={updateCell}\r\n                        />\r\n                    })\r\n                }</div>\r\n        );\r\n    });\r\n}","import './InfoPanel.css';\r\n\r\nexport default function InfoPanel({generation}) {\r\n\r\n\r\n    return (\r\n        <div id=\"info-panel\" className={'container'}>\r\n            <h3 className={'section-header'}>Information</h3>\r\n            <h4>Generation: {generation}</h4>\r\n            <h4>Living Cells:</h4>\r\n            <h4>Rules</h4>\r\n            <ol>\r\n                <li>Any live cell with two or three live neighbours survives.</li>\r\n                <li>Any dead cell with three live neighbours becomes a live cell.</li>\r\n                <li>All other live cells die in the next generation. Similarly, all other dead cells stay dead.</li>\r\n            </ol>\r\n\r\n        </div>\r\n    );\r\n}","import './ControlPanel.css';\r\nimport React from \"react\";\r\n\r\nexport default function ControlPanel({rowCount, isRunning, step, play, pause, changeGridDimensions,\r\n                                         resetGrid, clearGrid}) {\r\n\r\n\r\n    return (\r\n        <div id='control-panel' className='container'>\r\n            <h3 className={'section-header'}>Controls</h3>\r\n            <div className={'buttons'}>\r\n                <div className='button-row'>\r\n                    <button onClick={step}>Step</button>\r\n                    <button onClick={isRunning ? pause : play}>{isRunning ? 'Pause' : 'Play'}</button>\r\n                    <button onClick={resetGrid}>Reset</button>\r\n                    <button onClick={clearGrid}>Clear</button>\r\n                </div>\r\n                <div className={'grid-select-wrapper'}>\r\n                    <label htmlFor='grid-size-select'>Grid Size:</label>\r\n                    <select value={rowCount.toString()}\r\n                            id='grid-size-select'\r\n                            onChange={changeGridDimensions}>\r\n                        <option value='10'>10 x 10</option>\r\n                        <option value='25' >25 x 25</option>\r\n                        <option value='50'>50 x 50</option>\r\n                        <option value='100'>100 x 100</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import './App.css';\r\nimport React, {useState, useRef, useEffect} from 'react';\r\nimport CellGrid from \"./CellGrid\";\r\nimport InfoPanel from \"./InfoPanel\"\r\nimport ControlPanel from \"./ControlPanel\";\r\n\r\n\r\n\r\nfunction App() {\r\n    const interval = useRef(null);\r\n    const [rowCount, setRowCount] = useState(25)\r\n    const [columnCount, setColumnCount] = useState(25)\r\n    const [generation, setGeneration] = useState(0)\r\n    const [isRunning, setRunning] = useState(false);\r\n    const [grid, setGrid] = useState(null);\r\n    const [genZeroGrid, setGenZeroGrid] = useState(null)\r\n\r\n    const changeGridDimensions = (e) => {\r\n        setRowCount(parseInt(e.target.value));\r\n        setColumnCount(parseInt(e.target.value));\r\n        setGrid(freshGrid(parseInt(e.target.value), parseInt(e.target.value)));\r\n        setGeneration(0);\r\n        setGenZeroGrid(null);\r\n    }\r\n\r\n    const resetGrid = () => {\r\n        if (genZeroGrid !== null) setGrid(genZeroGrid);\r\n        setGeneration(0);\r\n        if (isRunning) setRunning(false);\r\n    }\r\n\r\n    const clearGrid = () => {\r\n        setGrid(freshGrid(rowCount, columnCount));\r\n        setGeneration(0);\r\n        if (isRunning) setRunning(false);\r\n    }\r\n\r\n    const freshGrid = (rows, columns) => {\r\n        let nextId = 0;\r\n        const freshGrid = [];\r\n        for (let i = 0; i < rows; i++){\r\n            freshGrid.push([]);\r\n            for (let j = 0; j < columns; j++){\r\n                freshGrid[i].push({\r\n                    id: nextId,\r\n                    isAlive: false,\r\n                })\r\n                nextId++;\r\n            }\r\n        }\r\n        return freshGrid;\r\n    }\r\n\r\n    const updateCell = (id, isAlive) => {\r\n        const newGrid = [...grid];\r\n        newGrid[Math.floor(id / rowCount)][id % rowCount].isAlive = isAlive;\r\n        setGrid(newGrid);\r\n    }\r\n\r\n    const incrementGeneration = () => {\r\n        const newGrid = grid.map((cellRow, i) => {\r\n            return cellRow.map((cell, j) => {\r\n                let neighbors = 0;\r\n                const newCell = {\r\n                    id: cell.id,\r\n                    isAlive: cell.isAlive\r\n                };\r\n\r\n                //check above\r\n                if (i !== 0) {\r\n                    if (j !== 0 && grid[i-1][j-1].isAlive) neighbors++;\r\n                    if (grid[i-1][j].isAlive) neighbors++;\r\n                    if (j !== (columnCount - 1) && grid[i-1][j+1].isAlive) neighbors++;\r\n                }\r\n\r\n                //check beside\r\n                if (j !== 0 && grid[i][j-1].isAlive) neighbors++;\r\n                if (j !== (columnCount - 1) && grid[i][j+1].isAlive) neighbors++;\r\n\r\n                //check below\r\n                if (i !== rowCount - 1) {\r\n                    if (j !== 0 && grid[i+1][j-1].isAlive) neighbors++;\r\n                    if (grid[i+1][j].isAlive) neighbors++;\r\n                    if (j !== (rowCount - 1) && grid[i+1][j+1].isAlive) neighbors++;\r\n                }\r\n\r\n                if (cell.isAlive && neighbors !== 2 && neighbors !== 3)  {\r\n                    newCell.isAlive = false;\r\n                } else if (!cell.isAlive && neighbors === 3) {\r\n                    newCell.isAlive = true;\r\n                }\r\n                return newCell;\r\n            })\r\n        })\r\n        setGrid(newGrid);\r\n        setGeneration((prevGeneration) => prevGeneration + 1);\r\n    }\r\n\r\n    useEffect( () => {\r\n        if (isRunning) {\r\n            interval.current = setInterval(incrementGeneration, 200);\r\n        }\r\n        return () => clearInterval(interval.current);\r\n    }, [grid, isRunning])\r\n\r\n    const play = (speed = 1) => {\r\n        if (generation === 0) setGenZeroGrid(grid);\r\n        setRunning(true);\r\n    }\r\n    const pause = () => {\r\n        setRunning(false);\r\n    }\r\n    const step = () => {\r\n        if (generation === 0) setGenZeroGrid(grid);\r\n        incrementGeneration();\r\n    }\r\n\r\n    if (grid === null) setGrid(freshGrid(rowCount, columnCount));\r\n\r\n    return (\r\n        <div className='main' style={{height: window.innerHeight}}>\r\n            <div className={'container grid-container'}>\r\n                <h1 className='site-header'>React Life</h1>\r\n                <CellGrid\r\n                    updateCell={updateCell}\r\n                    grid={grid}\r\n                />\r\n            </div>\r\n            <ControlPanel\r\n                rowCount={rowCount}\r\n                isRunning={isRunning}\r\n                step={step}\r\n                play={play}\r\n                pause={pause}\r\n                changeGridDimensions={changeGridDimensions}\r\n                resetGrid={resetGrid}\r\n                clearGrid={clearGrid}\r\n            />\r\n            <InfoPanel\r\n                generation={generation}\r\n            />\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}